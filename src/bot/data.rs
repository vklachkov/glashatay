use crate::domain::{ChannelEntryId, ChannelInfo, TelegramChannelId, VkId};
use once_cell::sync::Lazy;
use std::collections::HashMap;
use teloxide::types::ChatId;

pub const START_MESSAGE: &str = "–°—Ç–∞—Ä—Ç";

pub const HELP_MESSAGE: &str = "–•–µ–ª–ø";

pub const REQUEST_CHANNEL_MESSAGE: &str =
    "–ü–µ—Ä–µ—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–∞–±–ª–∏–∫–∞, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å—Ç—ã –∏–∑ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ";

pub const INVALID_CHANNEL_MESSAGE: &str = "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞";

pub const CHANNEL_RECEIVED_MESSAGE: &dyn Fn(&ChatId, &str) -> String =
    &|id, title| format!("–ü–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤ –ø–∞–±–ª–∏–∫ '{title}' ({id})");

pub const REQUEST_VK_URL_MESSAGE: &str =
    "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–µ–Ω—É —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –≤–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ";

pub const CHANNEL_ADDED_MESSAGE: &dyn Fn(&VkId, &TelegramChannelId) -> String =
    &|vk_id, tg_id| format!("–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å—Ç—ã –±—É–¥—É—Ç —Ä–µ–ø–æ—Å—Ç–∏—Ç—å—Å—è –∏–∑ {vk_id} –≤ {tg_id}");

pub const NO_CHANNELS_MESSAGE: &str = "–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤";

pub const REQUEST_CHANNEL_NUMBER_MESSAGE: &dyn Fn(&HashMap<ChannelEntryId, ChannelInfo>) -> String =
    &|channels| {
        format!(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n{}",
            format_channels_to_string(channels)
        )
    };

pub const INVALID_CHANNEL_NUMBER_MESSAGE: &str = "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏";

pub const APPROVE_CHANNEL_DELETION_MESSAGE: &dyn Fn(usize) -> String =
    &|number| format!("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å {}?", number + 1);

#[rustfmt::skip]
pub static APPROVE_CHANNEL_DELETION_BUTTONS: Lazy<[(&str, (usize, &str)); 2]> = Lazy::new(|| {
    [
        ("true", (0, "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")),
        ("false", (0, "–û—Ç–º–µ–Ω–∞")),
    ]
});

pub const STOPPING_CHANNEL_JOB_MESSAGE: &dyn Fn(&VkId, &TelegramChannelId) -> String =
    &|vk_id, tg_id| format!("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ {vk_id} –≤ –∫–∞–Ω–∞–ª {tg_id}...");

pub const CHANNEL_DELETED_MESSAGE: &dyn Fn(&VkId, &TelegramChannelId) -> String =
    &|vk_id, tg_id| format!("–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–æ—Å—Ç–æ–≤ –∏–∑ {vk_id} –≤ –∫–∞–Ω–∞–ª {tg_id} –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞!");

pub const CHANNEL_DELETION_CANCELLED_MESSAGE: &str = "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!";

pub const LIST_CHANNELS_MESSAGE: &dyn Fn(&HashMap<ChannelEntryId, ChannelInfo>) -> String =
    &|channels| {
        format!(
            "–í–∞—à —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:\n\n{}",
            format_channels_to_string(channels)
        )
    };

pub const CANCEL_MESSAGE: &str = "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞";

pub const UNKNOWN_ACTION_MESSAGE: &str = "–ù–µ –ø–æ–Ω–∏–º–∞—é(";

fn format_channels_to_string(channels: &HashMap<ChannelEntryId, ChannelInfo>) -> String {
    channels
        .iter()
        .enumerate()
        .map(|(n, (_id, info))| {
            let n = n + 1;
            let vk_id = &info.vk_public_id;
            let tg_id = &info.tg_channel;

            format!("{n}. –ò–∑ {vk_id} –≤ {tg_id}")
        })
        .collect::<Vec<_>>()
        .join("\n")
}
